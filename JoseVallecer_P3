<!doctype html>
<html>
<head>
<title>Canvas Interaction and Animation</title>
<script>
var canvas;
var context;
var shapes = [];

function text()
{
context.font = "48px Arial, Helvetica, sans-serif";
context.fillText("SHAPES", 10, 50);
}

function Rectangle(x,y,w,h,color)
{
	this.x = x;
	this.y = y;
	this.w = w;
	this.h = h;
	this.dx = Math.random()*4-2;
	this.dy = Math.random()*4-2;
	this.color = color;
	this.type = "r";
}

function Circle(x,y,r,color)
{
	this.x = x;
	this.y = y;
	this.r = r;
	this.dx = Math.random()*4-2;
	this.dy = Math.random()*4-2;
	this.color = color;
	this.type = "c";
}

function Triangle(x1, y1, x2, y2, x3, y3, color) 
{
	this.x1 = x1;
	this.y1 = y1;
	this.x2 = x2;
	this.y2 = y2;
	this.x3 = x3;
	this.y3 = y3;
	this.dx = Math.random()*4-2;
	this.dy = Math.random()*4-2;
	this.color = color;
	this.type = "t";
}

function Fan(x, y, r, color)
{
	this.x = x;
	this.y = y;
	this.r = r;
	this.dx = Math.random()*4-2;
	this.dy = Math.random()*4-2;
	this.color = color;
	this.type = "f";
}

function Star(x, y, spikes, outer, inner, color)
{
	this.x = x;
	this.y = y;
	this.spikes = spikes;
	this.outer = outer;
	this.inner= inner;
	this.dx = Math.random()*4-2;
	this.dy = Math.random()*4-2;
	this.color = color;
	this.type = "s"; 
}
	
function init() {
	canvas = document.getElementById('canvas');
	context = canvas.getContext("2d");
 
	//window.addEventListener('resize', resizeCanvas, false);
	//window.addEventListener('orientationchange', resizeCanvas, false);
	resizeCanvas();
	canvas.onclick = function(event) {
		handleClick(event.clientX, event.clientY);
	};
	timer = setInterval(resizeCanvas, 20);
}

function resizeCanvas() {
	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;
	fillBackgroundColor();
	for( var i=0; i<shapes.length; i++ )
	{
		if(shapes[i].type=="r")	drawRect(shapes[i]);
		if(shapes[i].type=="c") drawCircle(shapes[i]);
		if(shapes[i].type=="t") drawTriangle(shapes[i]);
		if(shapes[i].type=="f") drawFan(shapes[i]);
		if(shapes[i].type=="s") drawStar(shapes[i]);
	}
text();
}

function fillBackgroundColor() {
	context.fillStyle = 'black';
	context.fillRect(0, 0, canvas.width, canvas.height);
}
function handleClick(x, y) 
{
	var colors = ["lightcoral", "lightseagreen", "paleturquoise", "salmon", "plum", "lightgoldenrodyellow", "lightskyblue", "palevioletred", "powderblue", "palegreen", "olive", "lightsteelblue", "antiquewhite", "azure"];
	var color = colors[Math.floor(Math.random()*colors.length)];
	var r = Math.random();
	if(r >= 0 && r<= 0.19)
		shapes.push(new Rectangle(x,y,Math.random()*50,Math.random()*50,color));
	else if(r >= 0.20 && r<= 0.39)
		shapes.push(new Circle(x,y,Math.random()*50,color));
	else if(r >= 0.40 && r<= 0.59)
		shapes.push(new Triangle(x, y, Math.random()*70+x, Math.random()*70+y, Math.random()*70+x, Math.random()*70+y, color));
	else if(r >= 0.60 && r<= 0.79)
		shapes.push(new Fan(x, y, Math.random()*50, color));
	else 
		shapes.push(new Star(x, y, 5, Math.random()*50+30,  Math.random()*50+15, color));
}

function drawRect(r)
{
	context.fillStyle = r.color;
	context.fillRect(r.x,r.y,r.w,r.h);
	r.x+=r.dx;
	r.y+=r.dy;
}

function drawCircle(c)
{
	context.beginPath();
	context.arc(c.x, c.y, c.r, 0, 2*Math.PI, false);
	context.fillStyle = c.color;
	context.fill();
	c.x+=c.dx;
	c.y+=c.dy;
}

function drawTriangle(t)
{
	context.beginPath();
    context.moveTo(t.x1, t.y1);
    context.lineTo(t.x2, t.y2);
    context.lineTo(t.x3, t.x3);
    context.closePath();
    context.fillStyle = t.color;
    context.fill();
    t.x1+=t.dx;
    t.y1+=t.dy;
    t.x2+=t.dx;
    t.y2+=t.dy;
    t.x3+=t.dx;
    t.y3+=t.dy;    
}

function drawFan(f)
{
	context.beginPath();
	context.arc(f.x, f.y, f.r, Math.PI, Math.PI*1.75, false);
	context.lineTo(f.x, f.y);
	context.closePath();
	context.fillStyle = f.color;
	context.fill();
	f.x+=f.dx;
	f.y+=f.dy;
}

function drawStar(s)
{
	var rot = Math.PI / 2 * 3;
	var step = Math.PI / s.spikes;

	context.beginPath();
	for (i = 0; i  < s.spikes; i++) {
		x = s.x + Math.cos(rot) * s.outer;
		y = s.y + Math.sin(rot) * s.outer;
		context.lineTo(x, y)
		rot += step
		
		x = s.x + Math.cos(rot) * s.inner;
		y = s.y + Math.sin(rot) * s.inner;
		context.lineTo(x, y)
		rot += step
		}
	context.closePath();
	context.fillStyle = s.color;
	context.fill();
	s.x+=s.dx;
	s.y+=s.dy;
}


window.onload = init;
</script>
</head>
<body>
<canvas id='canvas' width=500 height=500></canvas>
</body>	  
